/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dxw.server.ui;


import com.dxw.common.ms.Notification;
import com.dxw.common.ms.NotificationManager;
import com.dxw.common.services.ServiceRegistry;
import com.dxw.common.services.ServiceRegistryImpl;
import com.dxw.common.services.Services;
import com.serotonin.modbus4j.ModbusFactory;
import com.serotonin.modbus4j.ModbusMaster;
import com.serotonin.modbus4j.exception.ModbusInitException;
import com.serotonin.modbus4j.exception.ModbusTransportException;
import com.serotonin.modbus4j.ip.IpParameters;
import com.serotonin.modbus4j.msg.ModbusRequest;
import com.serotonin.modbus4j.msg.ModbusResponse;
import com.serotonin.modbus4j.msg.WriteRegistersRequest;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author pronics3
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        init();
    }
    NotificationManager notificationManager;
    private void init() {
        ServiceRegistry registry = ServiceRegistryImpl.getInstance();
        
        notificationManager = (NotificationManager)registry.lookupService( Services.NOTIFICATION_MANAGER);
        
        notificationManager.addReceiver((String tag, Notification notification) -> {
            String message = String.format("[%S] %s %s\r\n", tag, 
                    new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(notification.getWhen())),
                    notification.getContent().toString());
            txtMessage.append(message);
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JSplitPane jSplitPane1 = new javax.swing.JSplitPane();
        javax.swing.JPanel panelUpper = new javax.swing.JPanel();
        javax.swing.JButton btnStop = new javax.swing.JButton();
        javax.swing.JButton btnStart = new javax.swing.JButton();
        javax.swing.JButton btnClean = new javax.swing.JButton();
        javax.swing.JButton btnCalibrate = new javax.swing.JButton();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PLC模拟器");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        btnStop.setText("停机");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        panelUpper.add(btnStop);

        btnStart.setText("启动");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        panelUpper.add(btnStart);

        btnClean.setText("清洗");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });
        panelUpper.add(btnClean);

        btnCalibrate.setText("时间校准");
        btnCalibrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalibrateActionPerformed(evt);
            }
        });
        panelUpper.add(btnCalibrate);

        jSplitPane1.setTopComponent(panelUpper);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        jScrollPane1.setViewportView(txtMessage);

        jPanel1.add(jScrollPane1);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
         sendSysCommand((short) 0);
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        sendSysCommand((short) 1);
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        sendSysCommand((short) 2);
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnCalibrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalibrateActionPerformed
        ModbusMaster master = getTcpMaster("127.0.0.1");
        Calendar c = Calendar.getInstance();
        try {
            master.init();
            ModbusRequest req;
            req = new WriteRegistersRequest(2, 101,
                    new short[]{(short)c.get(Calendar.HOUR), 
                        (short)c.get(Calendar.MINUTE),(short)c.get(Calendar.SECOND)});
            ModbusResponse res = master.send(req);
            
            System.out.println(res.isException());

        } catch (ModbusInitException | ModbusTransportException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnCalibrateActionPerformed
    private ModbusMaster getTcpMaster(String ip) {
        ModbusFactory factory = new ModbusFactory();
        IpParameters primaryParams = new IpParameters();
        primaryParams.setHost(ip);
        primaryParams.setPort(502);

        return factory.createTcpMaster(primaryParams, false);
    }

    private void sendSysCommand(short code) {
        ModbusMaster master = getTcpMaster("127.0.0.1");

        try {
            master.init();
            ModbusRequest req = new WriteRegistersRequest(2, 100,
                    new short[]{code});
            ModbusResponse res = master.send(req);

        } catch (ModbusInitException | ModbusTransportException ex) {
            System.out.println(ex.getMessage());
        }
    }

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables
}
